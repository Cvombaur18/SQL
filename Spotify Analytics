# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

------------------------------------------------------------------------------------------------------
#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

------------------------------------------------------------------------------------------------------

# Checking out the data

/* SELECT * FROM BIT_DB.Spotifydata */

------------------------------------------------------------------------------------------------------

# Sorting by most popular artist and their popularity based on their songs in the top 50
/*SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC*/

------------------------------------------------------------------------------------------------------

# Find the loudest track along with the artist

/* SELECT artist_name, track_name, loudness
FROM BIT_DB.Spotifydata
ORDER BY loudness ASC
LIMIT 1;*/

------------------------------------------------------------------------------------------------------

# Get the average popularity, danceability, and energy.  Multiplied and rounded danceability and energy to get a percenrage number

/* SELECT AVG(popularity), AVG(ROUND(danceability) * 100), AVG(ROUND(energy) * 100)
FROM BIT_DB.Spotifydata*/

------------------------------------------------------------------------------------------------------

# Used a subquery to get all songs that are higher than the average popularity then ordered them starting with highest popularity 

/*SELECT * 
FROM BIT_DB.Spotifydata
WHERE popularity > (SELECT AVG(popularity) 
FROM BIT_DB.Spotifydata)
ORDER BY popularity DESC*/

------------------------------------------------------------------------------------------------------

# Found the artist, track, and popularity of an artist that starts with the letter L

/*SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
WHERE artist_name LIKE 'L%'
ORDER BY popularity ASC*/

------------------------------------------------------------------------------------------------------

# Found the total number of hours it would take to listen to all 50 songs

/* SELECT SUM(duration_ms) / 1000 / 60 AS num_hours
FROM BIT_DB.Spotifydata */

------------------------------------------------------------------------------------------------------

# listed artist and track for all songs that had intrumentalness above 0

/*SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
WHERE instrumentalness > 0.0
ORDER BY popularity*/
